// Generated by Haxe 4.3.6
(function ($hx_exports, $global) { "use strict";
$hx_exports["logging"] = $hx_exports["logging"] || {};
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var HxOverrides = function() { };
HxOverrides.__name__ = "HxOverrides";
HxOverrides.dateStr = function(date) {
	var m = date.getMonth() + 1;
	var d = date.getDate();
	var h = date.getHours();
	var mi = date.getMinutes();
	var s = date.getSeconds();
	return date.getFullYear() + "-" + (m < 10 ? "0" + m : "" + m) + "-" + (d < 10 ? "0" + d : "" + d) + " " + (h < 10 ? "0" + h : "" + h) + ":" + (mi < 10 ? "0" + mi : "" + mi) + ":" + (s < 10 ? "0" + s : "" + s);
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.now = function() {
	return Date.now();
};
var Main = function() { };
Main.__name__ = "Main";
Main.main = function() {
	haxe_Log.trace("running",{ fileName : "src2/Main.hx", lineNumber : 12, className : "Main", methodName : "main"});
	var httpClient = new http_HttpClient();
	var request = http_HttpRequest.fromString("https://www.google.com");
	request.method = "GET";
	thenshim_Promise.then(httpClient.makeRequest(request,null,null,null),function(response) {
		if(response.httpStatus != 200) {
			haxe_Log.trace("error http" + response.httpStatus,{ fileName : "src2/Main.hx", lineNumber : 17, className : "Main", methodName : "main"});
			throw haxe_Exception.thrown("error http" + response.httpStatus);
		}
		haxe_Log.trace(response,{ fileName : "src2/Main.hx", lineNumber : 22, className : "Main", methodName : "main"});
	},function(error) {
		haxe_Log.trace(" httpclient error",{ fileName : "src2/Main.hx", lineNumber : 25, className : "Main", methodName : "main", customParams : [error]});
	});
};
Math.__name__ = "Math";
var Reflect = function() { };
Reflect.__name__ = "Reflect";
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( _g ) {
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
var Std = function() { };
Std.__name__ = "Std";
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x);
	if(isNaN(v)) {
		return null;
	}
	return v;
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var StringBuf = function() {
	this.b = "";
};
StringBuf.__name__ = "StringBuf";
StringBuf.prototype = {
	__class__: StringBuf
};
var StringTools = function() { };
StringTools.__name__ = "StringTools";
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.rpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	var buf_b = "";
	buf_b += s == null ? "null" : "" + s;
	while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
	return buf_b;
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	do {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
	} while(n > 0);
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var haxe_io_Output = function() { };
haxe_io_Output.__name__ = "haxe.io.Output";
var _$Sys_FileOutput = function(fd) {
	this.fd = fd;
};
_$Sys_FileOutput.__name__ = "_Sys.FileOutput";
_$Sys_FileOutput.__super__ = haxe_io_Output;
_$Sys_FileOutput.prototype = $extend(haxe_io_Output.prototype,{
	writeByte: function(c) {
		js_node_Fs.writeSync(this.fd,String.fromCodePoint(c));
	}
	,writeBytes: function(s,pos,len) {
		var data = s.b;
		return js_node_Fs.writeSync(this.fd,js_node_buffer_Buffer.from(data.buffer,data.byteOffset,s.length),pos,len);
	}
	,writeString: function(s,encoding) {
		js_node_Fs.writeSync(this.fd,s);
	}
	,flush: function() {
		js_node_Fs.fsyncSync(this.fd);
	}
	,close: function() {
		js_node_Fs.closeSync(this.fd);
	}
	,__class__: _$Sys_FileOutput
});
var haxe_io_Input = function() { };
haxe_io_Input.__name__ = "haxe.io.Input";
var _$Sys_FileInput = function(fd) {
	this.fd = fd;
};
_$Sys_FileInput.__name__ = "_Sys.FileInput";
_$Sys_FileInput.__super__ = haxe_io_Input;
_$Sys_FileInput.prototype = $extend(haxe_io_Input.prototype,{
	readByte: function() {
		var buf = js_node_buffer_Buffer.alloc(1);
		try {
			js_node_Fs.readSync(this.fd,buf,0,1,null);
		} catch( _g ) {
			var e = haxe_Exception.caught(_g).unwrap();
			if(e.code == "EOF") {
				throw haxe_Exception.thrown(new haxe_io_Eof());
			} else {
				throw haxe_Exception.thrown(haxe_io_Error.Custom(e));
			}
		}
		return buf[0];
	}
	,readBytes: function(s,pos,len) {
		var data = s.b;
		var buf = js_node_buffer_Buffer.from(data.buffer,data.byteOffset,s.length);
		try {
			return js_node_Fs.readSync(this.fd,buf,pos,len,null);
		} catch( _g ) {
			var e = haxe_Exception.caught(_g).unwrap();
			if(e.code == "EOF") {
				throw haxe_Exception.thrown(new haxe_io_Eof());
			} else {
				throw haxe_Exception.thrown(haxe_io_Error.Custom(e));
			}
		}
	}
	,close: function() {
		js_node_Fs.closeSync(this.fd);
	}
	,__class__: _$Sys_FileInput
});
var ValueType = $hxEnums["ValueType"] = { __ename__:true,__constructs__:null
	,TNull: {_hx_name:"TNull",_hx_index:0,__enum__:"ValueType",toString:$estr}
	,TInt: {_hx_name:"TInt",_hx_index:1,__enum__:"ValueType",toString:$estr}
	,TFloat: {_hx_name:"TFloat",_hx_index:2,__enum__:"ValueType",toString:$estr}
	,TBool: {_hx_name:"TBool",_hx_index:3,__enum__:"ValueType",toString:$estr}
	,TObject: {_hx_name:"TObject",_hx_index:4,__enum__:"ValueType",toString:$estr}
	,TFunction: {_hx_name:"TFunction",_hx_index:5,__enum__:"ValueType",toString:$estr}
	,TClass: ($_=function(c) { return {_hx_index:6,c:c,__enum__:"ValueType",toString:$estr}; },$_._hx_name="TClass",$_.__params__ = ["c"],$_)
	,TEnum: ($_=function(e) { return {_hx_index:7,e:e,__enum__:"ValueType",toString:$estr}; },$_._hx_name="TEnum",$_.__params__ = ["e"],$_)
	,TUnknown: {_hx_name:"TUnknown",_hx_index:8,__enum__:"ValueType",toString:$estr}
};
ValueType.__constructs__ = [ValueType.TNull,ValueType.TInt,ValueType.TFloat,ValueType.TBool,ValueType.TObject,ValueType.TFunction,ValueType.TClass,ValueType.TEnum,ValueType.TUnknown];
var Type = function() { };
Type.__name__ = "Type";
Type.typeof = function(v) {
	switch(typeof(v)) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum($hxEnums[e]);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = "haxe.IMap";
haxe_IMap.__isInterface__ = true;
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
haxe_Exception.__name__ = "haxe.Exception";
haxe_Exception.caught = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value;
	} else if(((value) instanceof Error)) {
		return new haxe_Exception(value.message,null,value);
	} else {
		return new haxe_ValueException(value,null,value);
	}
};
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	unwrap: function() {
		return this.__nativeException;
	}
	,get_native: function() {
		return this.__nativeException;
	}
	,__class__: haxe_Exception
});
var haxe_Log = function() { };
haxe_Log.__name__ = "haxe.Log";
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			str += ", " + Std.string(v);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = "haxe.Timer";
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
haxe_ValueException.__name__ = "haxe.ValueException";
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	unwrap: function() {
		return this.value;
	}
	,__class__: haxe_ValueException
});
var haxe_crypto_Sha1 = function() {
};
haxe_crypto_Sha1.__name__ = "haxe.crypto.Sha1";
haxe_crypto_Sha1.encode = function(s) {
	var sh = new haxe_crypto_Sha1();
	var h = sh.doEncode(haxe_crypto_Sha1.str2blks(s));
	return sh.hex(h);
};
haxe_crypto_Sha1.str2blks = function(s) {
	var s1 = haxe_io_Bytes.ofString(s);
	var nblk = (s1.length + 8 >> 6) + 1;
	var blks = [];
	var _g = 0;
	var _g1 = nblk * 16;
	while(_g < _g1) {
		var i = _g++;
		blks[i] = 0;
	}
	var _g = 0;
	var _g1 = s1.length;
	while(_g < _g1) {
		var i = _g++;
		var p = i >> 2;
		blks[p] |= s1.b[i] << 24 - ((i & 3) << 3);
	}
	var i = s1.length;
	var p = i >> 2;
	blks[p] |= 128 << 24 - ((i & 3) << 3);
	blks[nblk * 16 - 1] = s1.length * 8;
	return blks;
};
haxe_crypto_Sha1.prototype = {
	doEncode: function(x) {
		var w = [];
		var a = 1732584193;
		var b = -271733879;
		var c = -1732584194;
		var d = 271733878;
		var e = -1009589776;
		var i = 0;
		while(i < x.length) {
			var olda = a;
			var oldb = b;
			var oldc = c;
			var oldd = d;
			var olde = e;
			var j = 0;
			while(j < 80) {
				if(j < 16) {
					w[j] = x[i + j];
				} else {
					var num = w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16];
					w[j] = num << 1 | num >>> 31;
				}
				var t = (a << 5 | a >>> 27) + this.ft(j,b,c,d) + e + w[j] + this.kt(j);
				e = d;
				d = c;
				c = b << 30 | b >>> 2;
				b = a;
				a = t;
				++j;
			}
			a += olda;
			b += oldb;
			c += oldc;
			d += oldd;
			e += olde;
			i += 16;
		}
		return [a,b,c,d,e];
	}
	,ft: function(t,b,c,d) {
		if(t < 20) {
			return b & c | ~b & d;
		}
		if(t < 40) {
			return b ^ c ^ d;
		}
		if(t < 60) {
			return b & c | b & d | c & d;
		}
		return b ^ c ^ d;
	}
	,kt: function(t) {
		if(t < 20) {
			return 1518500249;
		}
		if(t < 40) {
			return 1859775393;
		}
		if(t < 60) {
			return -1894007588;
		}
		return -899497514;
	}
	,hex: function(a) {
		var str = "";
		var _g = 0;
		while(_g < a.length) {
			var num = a[_g];
			++_g;
			str += StringTools.hex(num,8);
		}
		return str.toLowerCase();
	}
	,__class__: haxe_crypto_Sha1
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
haxe_ds_IntMap.__name__ = "haxe.ds.IntMap";
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.createCopy = function(h) {
	var copy = new haxe_ds_StringMap();
	for (var key in h) copy.h[key] = h[key];
	return copy;
};
haxe_ds_StringMap.prototype = {
	__class__: haxe_ds_StringMap
};
var haxe_http_HttpBase = function(url) {
	this.url = url;
	this.headers = [];
	this.params = [];
	this.emptyOnData = $bind(this,this.onData);
};
haxe_http_HttpBase.__name__ = "haxe.http.HttpBase";
haxe_http_HttpBase.prototype = {
	addHeader: function(header,value) {
		this.headers.push({ name : header, value : value});
	}
	,addParameter: function(name,value) {
		this.params.push({ name : name, value : value});
	}
	,setPostData: function(data) {
		this.postData = data;
		this.postBytes = null;
	}
	,setPostBytes: function(data) {
		this.postBytes = data;
		this.postData = null;
	}
	,onData: function(data) {
	}
	,onBytes: function(data) {
	}
	,onError: function(msg) {
	}
	,onStatus: function(status) {
	}
	,hasOnData: function() {
		return $bind(this,this.onData) != this.emptyOnData;
	}
	,success: function(data) {
		this.responseBytes = data;
		this.responseAsString = null;
		if(this.hasOnData()) {
			this.onData(this.get_responseData());
		}
		this.onBytes(this.responseBytes);
	}
	,get_responseData: function() {
		if(this.responseAsString == null && this.responseBytes != null) {
			this.responseAsString = this.responseBytes.getString(0,this.responseBytes.length,haxe_io_Encoding.UTF8);
		}
		return this.responseAsString;
	}
	,__class__: haxe_http_HttpBase
};
var haxe_http_HttpNodeJs = function(url) {
	this._customRequestPost = null;
	this._customRequestMethod = null;
	haxe_http_HttpBase.call(this,url);
};
haxe_http_HttpNodeJs.__name__ = "haxe.http.HttpNodeJs";
haxe_http_HttpNodeJs.__super__ = haxe_http_HttpBase;
haxe_http_HttpNodeJs.prototype = $extend(haxe_http_HttpBase.prototype,{
	cancel: function() {
		if(this.req == null) {
			return;
		}
		this.req.abort();
		this.req = null;
	}
	,request: function(post) {
		var _gthis = this;
		this.responseAsString = null;
		this.responseBytes = null;
		this.responseHeaders = null;
		var parsedUrl = new js_node_url_URL(this.url);
		var secure = parsedUrl.protocol == "https:";
		var host = parsedUrl.hostname;
		var path = parsedUrl.pathname;
		var queryParams = parsedUrl.search;
		if(queryParams != null && queryParams.length > 0) {
			if(!StringTools.startsWith(queryParams,"?")) {
				queryParams = "?" + queryParams;
			}
		}
		if(queryParams != null) {
			path += queryParams;
		}
		var port = parsedUrl.port != null ? Std.parseInt(parsedUrl.port) : secure ? 443 : 80;
		var h = { };
		var _g = 0;
		var _g1 = this.headers;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			h[i.name] = i.value;
		}
		if(this.postData != null || this.postBytes != null) {
			post = true;
		}
		var uri = null;
		var _g = 0;
		var _g1 = this.params;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			if(uri == null) {
				uri = "";
			} else {
				uri += "&";
			}
			var s = p.name;
			var uri1 = encodeURIComponent(s) + "=";
			var s1 = p.value;
			uri += uri1 + encodeURIComponent(s1);
		}
		var question = path.split("?").length <= 1;
		if(uri != null) {
			path += (question ? "?" : "&") + uri;
		}
		var method = post ? "POST" : "GET";
		if(this._customRequestMethod != null) {
			method = this._customRequestMethod;
		}
		if(this._customRequestPost != null) {
			post = this._customRequestPost;
		}
		var opts = { protocol : parsedUrl.protocol, hostname : host, port : port, method : method, path : path, headers : h};
		var httpResponse = function(res) {
			res.setEncoding("binary");
			var s = res.statusCode;
			if(s != null) {
				_gthis.onStatus(s);
			}
			var data = [];
			res.on("data",function(chunk) {
				data.push(js_node_buffer_Buffer.from(chunk,"binary"));
			});
			res.on("end",function(_) {
				if(res.headers != null) {
					_gthis.responseHeaders = new haxe_ds_StringMap();
					var _g = 0;
					var _g1 = Reflect.fields(res.headers);
					while(_g < _g1.length) {
						var f = _g1[_g];
						++_g;
						var v = Reflect.field(res.headers,f);
						_gthis.responseHeaders.h[f] = v;
					}
				}
				var buf = data.length == 1 ? data[0] : js_node_buffer_Buffer.concat(data);
				var httpResponse = buf.buffer.slice(buf.byteOffset,buf.byteOffset + buf.byteLength);
				_gthis.responseBytes = haxe_io_Bytes.ofData(httpResponse);
				_gthis.req = null;
				if(s != null && s >= 200 && s < 400) {
					_gthis.success(_gthis.responseBytes);
				} else {
					_gthis.onError("Http Error #" + s);
				}
			});
		};
		this.req = secure ? js_node_Https.request(opts,httpResponse) : js_node_Http.request(opts,httpResponse);
		if(post) {
			if(this.postData != null) {
				this.req.write(this.postData);
			} else if(this.postBytes != null) {
				this.req.setHeader("Content-Length","" + this.postBytes.length);
				this.req.write(js_node_buffer_Buffer.from(this.postBytes.b.bufferValue));
			}
		}
		this.req.end();
	}
	,customRequest: function(post,method) {
		this._customRequestPost = post;
		this._customRequestMethod = method;
	}
	,__class__: haxe_http_HttpNodeJs
});
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = "haxe.io.Bytes";
haxe_io_Bytes.ofString = function(s,encoding) {
	if(encoding == haxe_io_Encoding.RawNative) {
		var buf = new Uint8Array(s.length << 1);
		var _g = 0;
		var _g1 = s.length;
		while(_g < _g1) {
			var i = _g++;
			var c = s.charCodeAt(i);
			buf[i << 1] = c & 255;
			buf[i << 1 | 1] = c >> 8;
		}
		return new haxe_io_Bytes(buf.buffer);
	}
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.prototype = {
	getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			var debug = pos > 0;
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var c2 = b[i++];
					var code1 = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var c21 = b[i++];
					var c3 = b[i++];
					var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c);
			}
			break;
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_io_BytesBuffer = function() {
	this.pos = 0;
	this.size = 0;
};
haxe_io_BytesBuffer.__name__ = "haxe.io.BytesBuffer";
haxe_io_BytesBuffer.prototype = {
	add: function(src) {
		if(this.pos + src.length > this.size) {
			this.grow(src.length);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset,src.length);
		this.u8.set(sub,this.pos);
		this.pos += src.length;
	}
	,addString: function(v,encoding) {
		this.add(haxe_io_Bytes.ofString(v,encoding));
	}
	,addBytes: function(src,pos,len) {
		if(pos < 0 || len < 0 || pos + len > src.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(this.pos + len > this.size) {
			this.grow(len);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset + pos,len);
		this.u8.set(sub,this.pos);
		this.pos += len;
	}
	,grow: function(delta) {
		var req = this.pos + delta;
		var nsize = this.size == 0 ? 16 : this.size;
		while(nsize < req) nsize = nsize * 3 >> 1;
		var nbuf = new ArrayBuffer(nsize);
		var nu8 = new Uint8Array(nbuf);
		if(this.size > 0) {
			nu8.set(this.u8);
		}
		this.size = nsize;
		this.buffer = nbuf;
		this.u8 = nu8;
		this.view = new DataView(this.buffer);
	}
	,getBytes: function() {
		if(this.size == 0) {
			return new haxe_io_Bytes(new ArrayBuffer(0));
		}
		var b = new haxe_io_Bytes(this.buffer);
		b.length = this.pos;
		return b;
	}
	,__class__: haxe_io_BytesBuffer
};
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__:true,__constructs__:null
	,UTF8: {_hx_name:"UTF8",_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_name:"RawNative",_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
haxe_io_Encoding.__constructs__ = [haxe_io_Encoding.UTF8,haxe_io_Encoding.RawNative];
var haxe_io_Eof = function() {
};
haxe_io_Eof.__name__ = "haxe.io.Eof";
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__:true,__constructs__:null
	,Blocked: {_hx_name:"Blocked",_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_name:"Overflow",_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_name:"OutsideBounds",_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_._hx_name="Custom",$_.__params__ = ["e"],$_)
};
haxe_io_Error.__constructs__ = [haxe_io_Error.Blocked,haxe_io_Error.Overflow,haxe_io_Error.OutsideBounds,haxe_io_Error.Custom];
var haxe_io_Path = function() { };
haxe_io_Path.__name__ = "haxe.io.Path";
haxe_io_Path.normalize = function(path) {
	var slash = "/";
	path = path.split("\\").join(slash);
	if(path == slash) {
		return slash;
	}
	var target = [];
	var _g = 0;
	var _g1 = path.split(slash);
	while(_g < _g1.length) {
		var token = _g1[_g];
		++_g;
		if(token == ".." && target.length > 0 && target[target.length - 1] != "..") {
			target.pop();
		} else if(token == "") {
			if(target.length > 0 || HxOverrides.cca(path,0) == 47) {
				target.push(token);
			}
		} else if(token != ".") {
			target.push(token);
		}
	}
	var tmp = target.join(slash);
	var acc_b = "";
	var colon = false;
	var slashes = false;
	var _g_offset = 0;
	var _g_s = tmp;
	while(_g_offset < _g_s.length) {
		var s = _g_s;
		var index = _g_offset++;
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g_offset;
		}
		var c2 = c1;
		switch(c2) {
		case 47:
			if(!colon) {
				slashes = true;
			} else {
				var i = c2;
				colon = false;
				if(slashes) {
					acc_b += "/";
					slashes = false;
				}
				acc_b += String.fromCodePoint(i);
			}
			break;
		case 58:
			acc_b += ":";
			colon = true;
			break;
		default:
			var i1 = c2;
			colon = false;
			if(slashes) {
				acc_b += "/";
				slashes = false;
			}
			acc_b += String.fromCodePoint(i1);
		}
	}
	return acc_b;
};
haxe_io_Path.addTrailingSlash = function(path) {
	if(path.length == 0) {
		return "/";
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		if(c2 != path.length - 1) {
			return path + "\\";
		} else {
			return path;
		}
	} else if(c1 != path.length - 1) {
		return path + "/";
	} else {
		return path;
	}
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = "haxe.iterators.ArrayIterator";
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
	,__class__: haxe_iterators_ArrayIterator
};
var http_HttpClient = function() {
	this._provider = null;
	this._requestQueue = null;
	this._idToItem = new haxe_ds_IntMap();
	this._nextId = 0;
	this.onBeforeRedirect = null;
	this.retryDelayMs = 1000;
	this.retryCount = 0;
	this.followRedirects = true;
	this.log = new logging_Logger(http_HttpClient);
};
http_HttpClient.__name__ = "http.HttpClient";
http_HttpClient.prototype = {
	get_requestQueue: function() {
		if(this._requestQueue != null) {
			return this._requestQueue;
		}
		this._requestQueue = queues_QueueFactory.get_instance().createQueue("non-queue");
		this._requestQueue.set_onMessage($bind(this,this.onQueueMessage));
		return this._requestQueue;
	}
	,set_requestQueue: function(value) {
		this._requestQueue = value;
		this._requestQueue.set_onMessage($bind(this,this.onQueueMessage));
		return value;
	}
	,get_provider: function() {
		if(this._provider == null) {
			this._provider = new http_providers_DefaultHttpProvider();
		}
		return this._provider;
	}
	,set_provider: function(value) {
		this._provider = value;
		return value;
	}
	,setDefaultRequestHeader: function(header,value) {
		if(this.defaultRequestHeaders == null) {
			this.defaultRequestHeaders = new haxe_ds_StringMap();
		}
		this.defaultRequestHeaders.h[header] = value;
	}
	,removeDefaultRequestHeader: function(header,value) {
		if(this.defaultRequestHeaders != null) {
			var _this = this.defaultRequestHeaders;
			if(Object.prototype.hasOwnProperty.call(_this.h,header)) {
				delete(_this.h[header]);
				return true;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}
	,get: function(request,queryParams,headers) {
		request.method = "GET";
		return this.makeRequest(request,null,queryParams,headers);
	}
	,post: function(request,body,queryParams,headers) {
		request.method = "POST";
		return this.makeRequest(request,body,queryParams,headers);
	}
	,put: function(request,body,queryParams,headers) {
		request.method = "PUT";
		return this.makeRequest(request,body,queryParams,headers);
	}
	,'delete': function(request,body,queryParams,headers) {
		request.method = "DELETE";
		return this.makeRequest(request,body,queryParams,headers);
	}
	,makeRequest: function(request,body,queryParams,headers) {
		var _gthis = this;
		var copy = request.clone();
		var finalQueryParams = null;
		if(copy.get_queryParams() != null) {
			if(finalQueryParams == null) {
				finalQueryParams = new haxe_ds_StringMap();
			}
			var h = copy.get_queryParams().h;
			var key_h = h;
			var key_keys = Object.keys(h);
			var key_length = key_keys.length;
			var key_current = 0;
			while(key_current < key_length) {
				var key = key_keys[key_current++];
				var value = copy.get_queryParams().h[key];
				finalQueryParams.h[key] = value;
			}
		}
		if(queryParams != null) {
			if(finalQueryParams == null) {
				finalQueryParams = new haxe_ds_StringMap();
			}
			var h = queryParams.h;
			var key_h = h;
			var key_keys = Object.keys(h);
			var key_length = key_keys.length;
			var key_current = 0;
			while(key_current < key_length) {
				var key = key_keys[key_current++];
				finalQueryParams.h[key] = queryParams.h[key];
			}
		}
		copy.set_queryParams(finalQueryParams);
		var finalRequestHeaders = this.defaultRequestHeaders;
		if(copy.headers != null) {
			if(finalRequestHeaders == null) {
				finalRequestHeaders = new haxe_ds_StringMap();
			}
			var h = copy.headers.h;
			var key_h = h;
			var key_keys = Object.keys(h);
			var key_length = key_keys.length;
			var key_current = 0;
			while(key_current < key_length) {
				var key = key_keys[key_current++];
				finalRequestHeaders.h[key] = copy.headers.h[key];
			}
		}
		if(headers != null) {
			if(finalRequestHeaders == null) {
				finalRequestHeaders = new haxe_ds_StringMap();
			}
			var h = headers.h;
			var key_h = h;
			var key_keys = Object.keys(h);
			var key_length = key_keys.length;
			var key_current = 0;
			while(key_current < key_length) {
				var key = key_keys[key_current++];
				finalRequestHeaders.h[key] = headers.h[key];
			}
		}
		copy.headers = finalRequestHeaders;
		if(body != null) {
			copy.body = body;
		}
		return thenshim_Promise._new(function(resolve,reject) {
			thenshim_Promise.then(_gthis.get_requestQueue().start(),function(_) {
				_gthis._nextId++;
				_gthis._idToItem.h[_gthis._nextId] = { retryCount : 0, request : copy, resolve : resolve, reject : reject};
				_gthis.get_requestQueue().enqueue(_gthis._nextId);
			},function(error) {
				reject(error);
			});
		});
	}
	,onQueueMessage: function(itemId) {
		var _gthis = this;
		return thenshim_Promise._new(function(resolve,reject) {
			var item = _gthis._idToItem.h[itemId];
			if(item == null) {
				var httpError = new http_HttpError("could not find request item in map");
				reject(httpError);
				return;
			}
			var request = item.request.clone();
			if(_gthis.requestTransformers != null) {
				var _g = 0;
				var _g1 = _gthis.requestTransformers;
				while(_g < _g1.length) {
					var transformer = _g1[_g];
					++_g;
					transformer.process(request);
				}
			}
			var method = request.method;
			var _this = _gthis.log;
			var message = "making \"" + method.toLowerCase() + "\" request to \"" + request.url.build() + "\"";
			logging_LogManager.get_instance().log({ timestamp : HxOverrides.dateStr(new Date()), level : "Info", message : message, data : null, ref : _this._ref, instanceId : _this._instanceId});
			thenshim_Promise.then(_gthis.get_provider().makeRequest(request),function(response) {
				if(response != null) {
					if(logging_LogManager.get_instance().get_shouldLogDebug()) {
						var _this = _gthis.log;
						logging_LogManager.get_instance().log({ timestamp : HxOverrides.dateStr(new Date()), level : "Debug", message : "response received: ", data : null, ref : _this._ref, instanceId : _this._instanceId});
						var _this = _gthis.log;
						var data = response.headers;
						logging_LogManager.get_instance().log({ timestamp : HxOverrides.dateStr(new Date()), level : "Debug", message : "    headers:", data : data, ref : _this._ref, instanceId : _this._instanceId});
						var _this = _gthis.log;
						var data = response.get_bodyAsString();
						logging_LogManager.get_instance().log({ timestamp : HxOverrides.dateStr(new Date()), level : "Debug", message : "    body:", data : data, ref : _this._ref, instanceId : _this._instanceId});
					} else {
						var _this = _gthis.log;
						var message = "response received (" + response.httpStatus + ")";
						logging_LogManager.get_instance().log({ timestamp : HxOverrides.dateStr(new Date()), level : "Info", message : message, data : null, ref : _this._ref, instanceId : _this._instanceId});
					}
				} else if(logging_LogManager.get_instance().get_shouldLogWarnings()) {
					var _this = _gthis.log;
					logging_LogManager.get_instance().log({ timestamp : HxOverrides.dateStr(new Date()), level : "Warning", message : "null response received", data : null, ref : _this._ref, instanceId : _this._instanceId});
				}
				if(_gthis.responseTransformers != null) {
					var _g = 0;
					var _g1 = _gthis.responseTransformers;
					while(_g < _g1.length) {
						var transformer = _g1[_g];
						++_g;
						transformer.process(response);
					}
				}
				if(_gthis.followRedirects && (response.httpStatus == 301 || response.httpStatus == 302)) {
					var redirectLocation = null;
					if(response.headers != null) {
						redirectLocation = response.headers.h["location"];
						if(redirectLocation == null) {
							redirectLocation = response.headers.h["Location"];
						}
					}
					var url = http_Url.fromString(redirectLocation);
					if(redirectLocation == null) {
						var _this = _gthis.log;
						var message = "redirect encountered (" + response.httpStatus + "), no location header found";
						logging_LogManager.get_instance().log({ timestamp : HxOverrides.dateStr(new Date()), level : "Error", message : message, data : null, ref : _this._ref, instanceId : _this._instanceId});
						var httpError = new http_HttpError("no location header found",response.httpStatus);
						httpError.body = response.get_body();
						httpError.headers = response.headers;
						_gthis._idToItem.remove(itemId);
						item.reject(httpError);
						resolve(true);
						return;
					}
					item.request.url = http_Url.fromString(redirectLocation);
					item.retryCount = 0;
					if(_gthis.onBeforeRedirect != null) {
						_gthis.onBeforeRedirect(item.request);
					}
					_gthis.get_requestQueue().requeue(itemId);
					resolve(true);
					return;
				}
				_gthis._idToItem.remove(itemId);
				item.resolve(response);
				resolve(true);
			},function(error) {
				if(_gthis.retryCount == null) {
					var _this = _gthis.log;
					var message = "request failed (" + error.httpStatus + ")";
					logging_LogManager.get_instance().log({ timestamp : HxOverrides.dateStr(new Date()), level : "Error", message : message, data : null, ref : _this._ref, instanceId : _this._instanceId});
					error.retryCount = 0;
					_gthis._idToItem.remove(itemId);
					item.reject(error);
				} else {
					item.retryCount++;
					if(item.retryCount > _gthis.retryCount) {
						if(_gthis.retryCount > 0) {
							var _this = _gthis.log;
							var message = "request failed (" + error.httpStatus + "), retries exhausted";
							logging_LogManager.get_instance().log({ timestamp : HxOverrides.dateStr(new Date()), level : "Error", message : message, data : null, ref : _this._ref, instanceId : _this._instanceId});
							error.retryCount = item.retryCount - 1;
						} else {
							var _this = _gthis.log;
							var message = "request failed (" + error.httpStatus + ")";
							logging_LogManager.get_instance().log({ timestamp : HxOverrides.dateStr(new Date()), level : "Error", message : message, data : null, ref : _this._ref, instanceId : _this._instanceId});
							error.retryCount = 0;
						}
						_gthis._idToItem.remove(itemId);
						item.reject(error);
					} else {
						var _this = _gthis.log;
						var message = "request failed (" + error.httpStatus + "), retrying (" + item.retryCount + " of " + _gthis.retryCount + ")";
						logging_LogManager.get_instance().log({ timestamp : HxOverrides.dateStr(new Date()), level : "Error", message : message, data : null, ref : _this._ref, instanceId : _this._instanceId});
						_gthis.get_requestQueue().requeue(itemId,_gthis.retryDelayMs);
					}
				}
				resolve(true);
			});
		});
	}
	,__class__: http_HttpClient
};
var http_HttpError = function(message,httpStatus) {
	this.body = null;
	this.retryCount = 0;
	this.message = message;
	this.httpStatus = httpStatus;
};
http_HttpError.__name__ = "http.HttpError";
http_HttpError.prototype = {
	get_bodyAsString: function() {
		if(this.body == null) {
			return null;
		}
		return this.body.toString();
	}
	,get_bodyAsJson: function() {
		if(this.body == null) {
			return null;
		}
		return JSON.parse(this.body.toString());
	}
	,__class__: http_HttpError
};
var http_HttpRequest = {};
http_HttpRequest.fromString = function(s) {
	return new http_HttpRequestObject(http_Url.fromString(s));
};
var http_HttpRequestObject = function(url,headers) {
	this.method = "GET";
	this.url = url;
	this.headers = headers;
};
http_HttpRequestObject.__name__ = "http.HttpRequestObject";
http_HttpRequestObject.prototype = {
	get_queryParams: function() {
		if(this._queryParams == null) {
			this._queryParams = new haxe_ds_StringMap();
		}
		return this._queryParams;
	}
	,set_queryParams: function(value) {
		this._queryParams = value;
		return value;
	}
	,clone: function() {
		var c = new http_HttpRequestObject();
		c.method = this.method;
		c.url = this.url;
		if(this.headers != null) {
			c.headers = haxe_ds_StringMap.createCopy(this.headers.h);
		}
		c.body = this.body;
		c.remoteAddress = this.remoteAddress;
		if(this._queryParams != null) {
			c._queryParams = haxe_ds_StringMap.createCopy(this._queryParams.h);
		}
		return c;
	}
	,__class__: http_HttpRequestObject
};
var http_HttpResponse = function() {
	this._body = null;
	this.buffer = null;
};
http_HttpResponse.__name__ = "http.HttpResponse";
http_HttpResponse.prototype = {
	get_body: function() {
		if(this._body != null) {
			return this._body;
		}
		if(this.buffer == null) {
			return null;
		}
		this._body = this.buffer.getBytes();
		this.buffer = null;
		return this._body;
	}
	,set_body: function(value) {
		if(value == null) {
			return value;
		}
		this.buffer = new haxe_io_BytesBuffer();
		this.buffer.addBytes(value,0,value.length);
		return value;
	}
	,write: function(data,encoding) {
		if(this.buffer == null) {
			this.buffer = new haxe_io_BytesBuffer();
		}
		this.buffer.addString(data,encoding);
	}
	,get_bodyAsString: function() {
		if(this.get_body() == null) {
			return null;
		}
		return this.get_body().toString();
	}
	,get_bodyAsJson: function() {
		if(this.get_body() == null) {
			return null;
		}
		return JSON.parse(this.get_body().toString());
	}
	,__class__: http_HttpResponse
};
var http_IHttpProvider = function() { };
http_IHttpProvider.__name__ = "http.IHttpProvider";
http_IHttpProvider.__isInterface__ = true;
http_IHttpProvider.prototype = {
	__class__: http_IHttpProvider
};
var http_IHttpRequestTransformer = function() { };
http_IHttpRequestTransformer.__name__ = "http.IHttpRequestTransformer";
http_IHttpRequestTransformer.__isInterface__ = true;
http_IHttpRequestTransformer.prototype = {
	__class__: http_IHttpRequestTransformer
};
var http_IHttpResponseTransformer = function() { };
http_IHttpResponseTransformer.__name__ = "http.IHttpResponseTransformer";
http_IHttpResponseTransformer.__isInterface__ = true;
http_IHttpResponseTransformer.prototype = {
	__class__: http_IHttpResponseTransformer
};
var http_Url = {};
http_Url.fromString = function(s) {
	return new http_UrlObject(s);
};
var http_UrlObject = function(url) {
	if(url != null) {
		this.parse(url);
	}
};
http_UrlObject.__name__ = "http.UrlObject";
http_UrlObject.prototype = {
	get_queryParams: function() {
		if(this._queryParams == null) {
			this._queryParams = new haxe_ds_StringMap();
		}
		return this._queryParams;
	}
	,set_queryParams: function(value) {
		this._queryParams = value;
		return value;
	}
	,build: function(includeParams) {
		if(includeParams == null) {
			includeParams = true;
		}
		var sb_b = "";
		if(this.scheme != null) {
			sb_b += Std.string(this.scheme);
		} else {
			sb_b += "http";
		}
		sb_b += "://";
		var temp = "";
		if(this.domain != null) {
			temp += StringTools.trim(this.domain);
		}
		if(this.path != null) {
			temp += StringTools.trim(this.path);
		}
		temp = haxe_io_Path.normalize(temp);
		sb_b += temp == null ? "null" : "" + temp;
		if(includeParams && this._queryParams != null) {
			var parts = [];
			var h = this._queryParams.h;
			var key_h = h;
			var key_keys = Object.keys(h);
			var key_length = key_keys.length;
			var key_current = 0;
			while(key_current < key_length) {
				var key = key_keys[key_current++];
				var tmp = this._queryParams.h[key];
				parts.push(key + "=" + (tmp == null ? "null" : Std.string(tmp)));
			}
			if(parts.length > 0) {
				sb_b += "?";
				sb_b += Std.string(parts.join("&"));
			}
		}
		return sb_b;
	}
	,parse: function(url) {
		this.scheme = null;
		this.domain = null;
		this.path = null;
		this._queryParams = null;
		url = StringTools.trim(url);
		var n1 = url.indexOf("://");
		if(n1 != -1) {
			this.scheme = url.substring(0,n1);
			url = HxOverrides.substr(url,n1 + "://".length,null);
		}
		var n2 = url.indexOf("/");
		if(n2 == -1) {
			n2 = url.indexOf("?");
		}
		if(n2 == -1) {
			n2 = url.length;
		}
		if(n2 != -1) {
			this.domain = url.substring(0,n2);
			url = HxOverrides.substr(url,n2,null);
		}
		if(!StringTools.startsWith(url,"?")) {
			var n3 = url.lastIndexOf("?");
			if(n3 == -1) {
				n3 = url.indexOf("/");
			}
			if(n3 == -1) {
				n3 = url.length;
			}
			if(n3 != -1) {
				this.path = url.substring(0,n3);
				url = url.substring(n3);
			}
		}
		var n4 = url.indexOf("?");
		if(n4 != -1) {
			var queryParams = HxOverrides.substr(url,n4 + 1,null);
			var paramParts = queryParams.split("&");
			var _g = 0;
			while(_g < paramParts.length) {
				var paramPart = paramParts[_g];
				++_g;
				if(this._queryParams == null) {
					this._queryParams = new haxe_ds_StringMap();
				}
				var parts = paramPart.split("=");
				var paramName = parts[0];
				if(paramName == null) {
					continue;
				}
				paramName = StringTools.trim(paramName);
				if(paramName.length == 0) {
					continue;
				}
				var paramValue = parts[1];
				if(paramValue != null) {
					paramValue = StringTools.trim(paramValue);
				}
				this._queryParams.h[paramName] = paramValue;
			}
			url = "";
		}
		if(url.length != 0) {
			this.path = url;
		}
		if(this.path == null) {
			this.path = "";
		}
	}
	,__class__: http_UrlObject
};
var http_providers_DefaultHttpProvider = function() {
	this.log = new logging_Logger(http_providers_DefaultHttpProvider);
};
http_providers_DefaultHttpProvider.__name__ = "http.providers.DefaultHttpProvider";
http_providers_DefaultHttpProvider.__interfaces__ = [http_IHttpProvider];
http_providers_DefaultHttpProvider.prototype = {
	makeRequest: function(request) {
		return this.makeRequestCommon(request);
	}
	,makeRequestCommon: function(request) {
		var _gthis = this;
		return thenshim_Promise._new(function(resolve,reject) {
			var url = request.url.build(false);
			var http = new haxe_http_HttpNodeJs(url);
			var response = new http_HttpResponse();
			response.originalRequest = request;
			var allParameters = new haxe_ds_StringMap();
			var h = request.url.get_queryParams().h;
			var queryParamKey_h = h;
			var queryParamKey_keys = Object.keys(h);
			var queryParamKey_length = queryParamKey_keys.length;
			var queryParamKey_current = 0;
			while(queryParamKey_current < queryParamKey_length) {
				var queryParamKey = queryParamKey_keys[queryParamKey_current++];
				var value = request.url.get_queryParams().h[queryParamKey];
				allParameters.h[queryParamKey] = value;
			}
			var h = request.get_queryParams().h;
			var queryParamKey_h = h;
			var queryParamKey_keys = Object.keys(h);
			var queryParamKey_length = queryParamKey_keys.length;
			var queryParamKey_current = 0;
			while(queryParamKey_current < queryParamKey_length) {
				var queryParamKey = queryParamKey_keys[queryParamKey_current++];
				var value = request.get_queryParams().h[queryParamKey];
				allParameters.h[queryParamKey] = value;
			}
			var h = allParameters.h;
			var queryParamKey_h = h;
			var queryParamKey_keys = Object.keys(h);
			var queryParamKey_length = queryParamKey_keys.length;
			var queryParamKey_current = 0;
			while(queryParamKey_current < queryParamKey_length) {
				var queryParamKey = queryParamKey_keys[queryParamKey_current++];
				http.addParameter(queryParamKey,allParameters.h[queryParamKey]);
			}
			if(request.headers != null) {
				var h = request.headers.h;
				var headerKey_h = h;
				var headerKey_keys = Object.keys(h);
				var headerKey_length = headerKey_keys.length;
				var headerKey_current = 0;
				while(headerKey_current < headerKey_length) {
					var headerKey = headerKey_keys[headerKey_current++];
					http.addHeader(headerKey,request.headers.h[headerKey]);
				}
			}
			if(logging_LogManager.get_instance().get_shouldLogDebug()) {
				var method = request.method;
				var _this = _gthis.log;
				var message = "making \"" + method.toLowerCase() + "\" request to \"" + url + "\"";
				logging_LogManager.get_instance().log({ timestamp : HxOverrides.dateStr(new Date()), level : "Debug", message : message, data : null, ref : _this._ref, instanceId : _this._instanceId});
				var _this = _gthis.log;
				var data = request.headers;
				logging_LogManager.get_instance().log({ timestamp : HxOverrides.dateStr(new Date()), level : "Debug", message : "    headers:", data : data, ref : _this._ref, instanceId : _this._instanceId});
				var _this = _gthis.log;
				logging_LogManager.get_instance().log({ timestamp : HxOverrides.dateStr(new Date()), level : "Debug", message : "    query params:", data : allParameters, ref : _this._ref, instanceId : _this._instanceId});
				if(request.body != null) {
					var _this = _gthis.log;
					var data = request.body;
					logging_LogManager.get_instance().log({ timestamp : HxOverrides.dateStr(new Date()), level : "Debug", message : "    body:", data : data, ref : _this._ref, instanceId : _this._instanceId});
				}
			}
			http.onBytes = function(bytes) {
				response.headers = http.responseHeaders;
				response.set_body(bytes);
				resolve(response);
			};
			http.onStatus = function(status) {
				response.httpStatus = status;
			};
			http.onError = function(msg) {
				var httpError = new http_HttpError(msg,response.httpStatus);
				if(http.responseBytes != null) {
					httpError.body = http.responseBytes;
				}
				if(http.responseHeaders != null) {
					httpError.headers = http.responseHeaders;
				}
				reject(httpError);
			};
			var body = request.body;
			if(body != null) {
				if(request.headers != null) {
					var contentType = request.headers.h["Content-Type"];
					if(contentType == "application/json") {
						if(typeof(body) != "string") {
							body = JSON.stringify(body);
						}
					}
				}
				if(typeof(body) == "string") {
					http.setPostData(body);
				} else if(((body) instanceof haxe_io_Bytes)) {
					http.setPostBytes(body);
				} else {
					http.setPostData(body == null ? "null" : Std.string(body));
				}
			}
			switch(request.method) {
			case "DELETE":
				http.customRequest(true,"DELETE");
				http.request(true);
				break;
			case "GET":
				http.request();
				break;
			case "POST":
				http.request(true);
				break;
			case "PUT":
				http.customRequest(true,"PUT");
				http.request(true);
				break;
			default:
				throw haxe_Exception.thrown(new http_HttpError("http method not implemented (" + request.method + ")"));
			}
		});
	}
	,__class__: http_providers_DefaultHttpProvider
};
var http_server_impl_HttpServerBase = function(options) {
	this.options = { };
	this._fileDirs = null;
	this.onRequest = null;
	this.baseLog = new logging_Logger(http_server_impl_HttpServerBase);
	this.options = options;
	if(this.options == null) {
		this.options = { };
	}
};
http_server_impl_HttpServerBase.__name__ = "http.server.impl.HttpServerBase";
http_server_impl_HttpServerBase.prototype = {
	start: function(port) {
	}
	,stop: function() {
	}
	,serveFilesFrom: function(prefix,dir) {
		if(this._fileDirs == null) {
			this._fileDirs = [];
		}
		var dir1 = haxe_io_Path.normalize(haxe_io_Path.addTrailingSlash(process.cwd()) + "/" + dir);
		var _this = this.baseLog;
		logging_LogManager.get_instance().log({ timestamp : HxOverrides.dateStr(new Date()), level : "Info", message : "serving static resources from \"" + dir1 + "\"", data : null, ref : _this._ref, instanceId : _this._instanceId});
		this._fileDirs.push({ prefix : prefix, dir : dir1});
	}
	,__class__: http_server_impl_HttpServerBase
};
var http_server_impl_nodejs_HttpServerCommon = function(options) {
	http_server_impl_HttpServerBase.call(this,options);
};
http_server_impl_nodejs_HttpServerCommon.__name__ = "http.server.impl.nodejs.HttpServerCommon";
http_server_impl_nodejs_HttpServerCommon.__super__ = http_server_impl_HttpServerBase;
http_server_impl_nodejs_HttpServerCommon.prototype = $extend(http_server_impl_HttpServerBase.prototype,{
	create: function() {
		if(!this.options.clustered) {
			this.createServer();
		} else if(js_node_Cluster.isMaster) {
			var numCPUs = js_node_Os.cpus().length;
			var _g = 0;
			var _g1 = numCPUs;
			while(_g < _g1) {
				var i = _g++;
				js_node_Cluster.fork();
			}
		} else {
			this.createServer();
		}
	}
	,createServer: function() {
	}
	,__class__: http_server_impl_nodejs_HttpServerCommon
});
var http_server_impl_nodejs_HttpServer = function(options) {
	this.log = new logging_Logger(http_server_impl_nodejs_HttpServer);
	http_server_impl_nodejs_HttpServerCommon.call(this,options);
	if(options != null && options.sslAllowSelfSignedCertificates) {
		process.env["NODE_TLS_REJECT_UNAUTHORIZED"] = "0";
	}
	this.create();
};
http_server_impl_nodejs_HttpServer.__name__ = "http.server.impl.nodejs.HttpServer";
http_server_impl_nodejs_HttpServer.__super__ = http_server_impl_nodejs_HttpServerCommon;
http_server_impl_nodejs_HttpServer.prototype = $extend(http_server_impl_nodejs_HttpServerCommon.prototype,{
	start: function(port) {
		if(this.options.secure) {
			var _this = this.log;
			logging_LogManager.get_instance().log({ timestamp : HxOverrides.dateStr(new Date()), level : "Info", message : "starting secure server on port " + port, data : null, ref : _this._ref, instanceId : _this._instanceId});
			if(!this.options.clustered) {
				this._secureServer.listen(port);
			} else if(!js_node_Cluster.isMaster) {
				this._secureServer.listen(port);
			}
		} else {
			var _this = this.log;
			logging_LogManager.get_instance().log({ timestamp : HxOverrides.dateStr(new Date()), level : "Info", message : "starting server on port " + port, data : null, ref : _this._ref, instanceId : _this._instanceId});
			if(!this.options.clustered) {
				this._server.listen(port);
			} else if(!js_node_Cluster.isMaster) {
				this._server.listen(port);
			}
		}
	}
	,stop: function() {
		if(this.options.secure) {
			this._secureServer.close();
		} else {
			this._server.close();
		}
	}
	,createServer: function() {
		var _gthis = this;
		if(this.options.secure) {
			var serverOptions = { key : this.options.sslPrivateKey, cert : this.options.sslCertificate, passphrase : this.options.sslPrivateKeyPassword};
			this._secureServer = js_node_Https.createServer(serverOptions,function(request,response) {
				var data = null;
				request.on("data",function(chunk) {
					if(data == null) {
						data = "";
					}
					data += "" + chunk;
					return data;
				});
				request.on("end",function() {
					_gthis.processRequest(request,response,data);
				});
			});
		} else {
			this._server = js_node_Http.createServer(function(request,response) {
				var data = null;
				request.on("data",function(chunk) {
					if(data == null) {
						data = "";
					}
					data += "" + chunk;
					return data;
				});
				request.on("end",function() {
					_gthis.processRequest(request,response,data);
				});
			});
		}
	}
	,processRequest: function(nativeRequest,nativeResponse,payload) {
		if(this._fileDirs != null && this._fileDirs.length != 0) {
			var url = http_Url.fromString(nativeRequest.url);
			var _g = 0;
			var _g1 = this._fileDirs;
			while(_g < _g1.length) {
				var fileDir = _g1[_g];
				++_g;
				var urlPath = url.path;
				urlPath = decodeURIComponent(urlPath.split("+").join(" "));
				if(urlPath == "/") {
					urlPath = "/index.html";
				}
				if(StringTools.startsWith(urlPath,fileDir.prefix)) {
					var relativePath = StringTools.replace(urlPath,fileDir.prefix,"");
					var filePath = haxe_io_Path.normalize(fileDir.dir + "/" + relativePath);
					if(sys_FileSystem.exists(filePath)) {
						this.serveFile(filePath,nativeRequest,nativeResponse);
						return;
					}
				}
			}
		}
		var ip = nativeRequest.socket.remoteAddress;
		var _this = this.log;
		var message = "incoming " + nativeRequest.method + " request to \"" + nativeRequest.url + "\" from \"" + ip + "\"";
		logging_LogManager.get_instance().log({ timestamp : HxOverrides.dateStr(new Date()), level : "Info", message : message, data : null, ref : _this._ref, instanceId : _this._instanceId});
		if(logging_LogManager.get_instance().get_shouldLogData()) {
			var _this = this.log;
			var data = nativeRequest.headers;
			logging_LogManager.get_instance().log({ timestamp : HxOverrides.dateStr(new Date()), level : "Data", message : "headers", data : data, ref : _this._ref, instanceId : _this._instanceId});
			if(payload != null) {
				var _this = this.log;
				logging_LogManager.get_instance().log({ timestamp : HxOverrides.dateStr(new Date()), level : "Data", message : "payload", data : payload, ref : _this._ref, instanceId : _this._instanceId});
			}
		}
		if(this.onRequest == null) {
			nativeResponse.statusCode = 404;
			nativeResponse.end();
			return;
		}
		var request = this.nativeRequestToHttpRequest(nativeRequest,payload);
		var response = new http_HttpResponse();
		response.httpStatus = 200;
		response.headers = new haxe_ds_StringMap();
		response.headers.h["Content-Type"] = "text/pain";
		thenshim_Promise.then(this.onRequest(request,response),function(response) {
			nativeResponse.statusCode = response.httpStatus;
			if(response.headers != null) {
				var h = response.headers.h;
				var k_h = h;
				var k_keys = Object.keys(h);
				var k_length = k_keys.length;
				var k_current = 0;
				while(k_current < k_length) {
					var k = k_keys[k_current++];
					var v = response.headers.h[k];
					nativeResponse.setHeader(k,v);
				}
			}
			nativeResponse.setHeader("Access-Control-Allow-Origin","*");
			nativeResponse.setHeader("Access-Control-Allow-Headers","*");
			if(response.get_body() != null) {
				var buffer = new Uint8Array(response.get_body().b.bufferValue,0,response.get_body().length);
				nativeResponse.write(buffer);
			}
			nativeResponse.end();
		},function(error) {
			var httpError = null;
			if(((error) instanceof http_HttpError)) {
				httpError = error;
			} else if(((error) instanceof Error)) {
				var jsError = js_Boot.__cast(error , Error);
				httpError = new http_HttpError(jsError.message,500);
				httpError.body = haxe_io_Bytes.ofString(jsError.message);
			} else {
				httpError = new http_HttpError(Std.string(error));
				httpError.httpStatus = 500;
				httpError.body = haxe_io_Bytes.ofString(Std.string(error));
			}
			if(httpError == null) {
				httpError = new http_HttpError("unknown error encountered",500);
			}
			nativeResponse.setHeader("Access-Control-Allow-Origin","*");
			nativeResponse.setHeader("Access-Control-Allow-Headers","*");
			if(httpError.headers != null) {
				var h = httpError.headers.h;
				var key_h = h;
				var key_keys = Object.keys(h);
				var key_length = key_keys.length;
				var key_current = 0;
				while(key_current < key_length) {
					var key = key_keys[key_current++];
					nativeResponse.setHeader(key,httpError.headers.h[key]);
				}
			}
			nativeResponse.statusCode = httpError.httpStatus;
			if(httpError.body != null) {
				var buffer = new Uint8Array(httpError.body.b.bufferValue,0,httpError.body.length);
				nativeResponse.write(buffer);
			}
			nativeResponse.end();
		});
	}
	,serveFile: function(filePath,nativeRequest,nativeResponse) {
		var _this = this.log;
		logging_LogManager.get_instance().log({ timestamp : HxOverrides.dateStr(new Date()), level : "Info", message : "serving file \"" + filePath + "\"", data : null, ref : _this._ref, instanceId : _this._instanceId});
		js_node_Fs.readFile(filePath,function(error,buffer) {
			if(error != null) {
				return;
			}
			nativeResponse.setHeader("Access-Control-Allow-Origin","*");
			nativeResponse.setHeader("Access-Control-Allow-Headers","*");
			nativeResponse.write(buffer);
			nativeResponse.end();
		});
	}
	,nativeRequestToHttpRequest: function(nativeRequest,payload) {
		var url = http_Url.fromString(nativeRequest.url);
		var request = new http_HttpRequestObject(url,this.dynamicToMap(nativeRequest.headers));
		request.set_queryParams(url.get_queryParams());
		request.remoteAddress = nativeRequest.socket.remoteAddress;
		switch(Std.string(nativeRequest.method).toLowerCase()) {
		case "delete":
			request.method = "DELETE";
			break;
		case "get":
			request.method = "GET";
			break;
		case "options":
			request.method = "OPTIONS";
			break;
		case "patch":
			request.method = "PATCH";
			break;
		case "post":
			request.method = "POST";
			break;
		case "put":
			request.method = "PUT";
			break;
		}
		request.body = payload;
		return request;
	}
	,dynamicToMap: function(o) {
		var map = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = Reflect.fields(o);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			map.h[f] = Reflect.field(o,f);
		}
		return map;
	}
	,__class__: http_server_impl_nodejs_HttpServer
});
var js_Boot = function() { };
js_Boot.__name__ = "js.Boot";
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var con = e.__constructs__[o._hx_index];
			var n = con._hx_name;
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__cast = function(o,t) {
	if(o == null || js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw haxe_Exception.thrown("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_lib__$ArrayBuffer_ArrayBufferCompat = function() { };
js_lib__$ArrayBuffer_ArrayBufferCompat.__name__ = "js.lib._ArrayBuffer.ArrayBufferCompat";
js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var resultArray = new Uint8Array(u.byteLength);
	resultArray.set(u);
	return resultArray.buffer;
};
var js_node_Cluster = require("cluster");
var js_node_Fs = require("fs");
var js_node_Http = require("http");
var js_node_Https = require("https");
var js_node_KeyValue = {};
js_node_KeyValue.get_key = function(this1) {
	return this1[0];
};
js_node_KeyValue.get_value = function(this1) {
	return this1[1];
};
var js_node_Os = require("os");
var js_node_buffer_Buffer = require("buffer").Buffer;
var js_node_stream_WritableNewOptionsAdapter = {};
js_node_stream_WritableNewOptionsAdapter.from = function(options) {
	if(!Object.prototype.hasOwnProperty.call(options,"final")) {
		Object.defineProperty(options,"final",{ get : function() {
			return options.final_;
		}});
	}
	return options;
};
var js_node_url_URL = require("url").URL;
var js_node_url_URLSearchParamsEntry = {};
js_node_url_URLSearchParamsEntry._new = function(name,value) {
	return [name,value];
};
js_node_url_URLSearchParamsEntry.get_name = function(this1) {
	return this1[0];
};
js_node_url_URLSearchParamsEntry.get_value = function(this1) {
	return this1[1];
};
var logging_ILogAdaptor = function() { };
logging_ILogAdaptor.__name__ = "logging.ILogAdaptor";
logging_ILogAdaptor.__isInterface__ = true;
logging_ILogAdaptor.prototype = {
	__class__: logging_ILogAdaptor
};
var logging_ILogLineFormatter = function() { };
logging_ILogLineFormatter.__name__ = "logging.ILogLineFormatter";
logging_ILogLineFormatter.__isInterface__ = true;
logging_ILogLineFormatter.prototype = {
	__class__: logging_ILogLineFormatter
};
var logging_ILogger = function() { };
logging_ILogger.__name__ = "logging.ILogger";
logging_ILogger.__isInterface__ = true;
logging_ILogger.prototype = {
	__class__: logging_ILogger
};
var logging_LogManager = function() {
	this._shouldLogWarnings = null;
	this._shouldLogData = null;
	this._shouldLogDebug = null;
	this._started = false;
	this.StartDelay = 50;
	this._adaptors = [];
	this._queue = [];
};
logging_LogManager.__name__ = "logging.LogManager";
logging_LogManager.get_instance = function() {
	if(logging_LogManager._instance == null) {
		logging_LogManager._instance = new logging_LogManager();
	}
	return logging_LogManager._instance;
};
logging_LogManager.prototype = {
	start: function() {
		var _gthis = this;
		if(this._started == true) {
			return;
		}
		this._started = true;
		haxe_Timer.delay(function() {
			if(_gthis._adaptors.length == 0) {
				_gthis._adaptors.push(new logging_adaptors_NullLogAdaptor());
			}
			_gthis.processQueue();
		},this.StartDelay);
	}
	,log: function(data) {
		this._queue.push(data);
		this.processQueue();
	}
	,processQueue: function() {
		if(this._adaptors.length == 0) {
			return;
		}
		while(this._queue.length > 0) {
			var data = this._queue.shift();
			this.processLogData(data);
		}
	}
	,get_shouldLogDebug: function() {
		if(this._shouldLogDebug != null) {
			return this._shouldLogDebug;
		}
		this._shouldLogDebug = this.willRespondToLevel("Debug");
		return this._shouldLogDebug;
	}
	,get_shouldLogData: function() {
		if(this._shouldLogData != null) {
			return this._shouldLogData;
		}
		this._shouldLogData = this.willRespondToLevel("Data");
		return this._shouldLogData;
	}
	,get_shouldLogWarnings: function() {
		if(this._shouldLogWarnings != null) {
			return this._shouldLogWarnings;
		}
		this._shouldLogWarnings = this.willRespondToLevel("Warning");
		return this._shouldLogWarnings;
	}
	,willRespondToLevel: function(level) {
		var willRespond = false;
		var _g = 0;
		var _g1 = this._adaptors;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(a.get_config().disabled) {
				continue;
			}
			if(a.get_config().levels == null) {
				willRespond = true;
				continue;
			}
			if(a.get_config().levels.indexOf(level) != -1) {
				willRespond = true;
				break;
			}
		}
		return willRespond;
	}
	,processLogData: function(data) {
		var _g = 0;
		var _g1 = this._adaptors;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			var allow = !a.get_config().disabled;
			if(allow && data.ref != null && a.get_config().exclusions != null) {
				var _g2 = 0;
				var _g3 = a.get_config().exclusions;
				while(_g2 < _g3.length) {
					var p = _g3[_g2];
					++_g2;
					if(StringTools.startsWith(data.ref,p)) {
						allow = false;
						break;
					}
				}
			}
			if(allow && a.get_config().levels != null) {
				if(a.get_config().levels.indexOf(data.level) == -1) {
					allow = false;
				}
			}
			if(allow && data.ref != null && a.get_config().packages != null) {
				var _g4 = 0;
				var _g5 = a.get_config().packages;
				while(_g4 < _g5.length) {
					var p1 = _g5[_g4];
					++_g4;
					if(!StringTools.startsWith(data.ref,p1)) {
						allow = false;
						break;
					}
				}
			}
			if(allow == true) {
				a.processLogData(data);
			}
		}
	}
	,addAdaptor: function(adaptor) {
		if(adaptor.get_config().formatter == null) {
			adaptor.get_config().formatter = new logging_formatters_DefaultFormatter();
		}
		this._adaptors.push(adaptor);
		this._shouldLogDebug = null;
		this._shouldLogWarnings = null;
		this.start();
	}
	,clearAdaptors: function() {
		this._adaptors = [];
		this._adaptors.push(new logging_adaptors_NullLogAdaptor());
	}
	,__class__: logging_LogManager
};
var logging_Logger = $hx_exports["logging"]["Logger"] = function(ref,instanceId,generateInstanceId) {
	if(generateInstanceId == null) {
		generateInstanceId = false;
	}
	this._measurements = null;
	this._instanceId = null;
	this._ref = null;
	if(ref != null) {
		this._ref = ref.__name__;
	}
	this._instanceId = instanceId;
	if(this._instanceId == null && generateInstanceId) {
		this._instanceId = this.generateUuid();
	}
};
logging_Logger.__name__ = "logging.Logger";
logging_Logger.__interfaces__ = [logging_ILogger];
logging_Logger.prototype = {
	info: function(message,data) {
		logging_LogManager.get_instance().log({ timestamp : HxOverrides.dateStr(new Date()), level : "Info", message : message, data : data, ref : this._ref, instanceId : this._instanceId});
	}
	,debug: function(message,data) {
		logging_LogManager.get_instance().log({ timestamp : HxOverrides.dateStr(new Date()), level : "Debug", message : message, data : data, ref : this._ref, instanceId : this._instanceId});
	}
	,error: function(message,data) {
		logging_LogManager.get_instance().log({ timestamp : HxOverrides.dateStr(new Date()), level : "Error", message : message, data : data, ref : this._ref, instanceId : this._instanceId});
	}
	,warn: function(message,data) {
		logging_LogManager.get_instance().log({ timestamp : HxOverrides.dateStr(new Date()), level : "Warning", message : message, data : data, ref : this._ref, instanceId : this._instanceId});
	}
	,data: function(message,data) {
		logging_LogManager.get_instance().log({ timestamp : HxOverrides.dateStr(new Date()), level : "Data", message : message, data : data, ref : this._ref, instanceId : this._instanceId});
	}
	,performance: function(message,data) {
		logging_LogManager.get_instance().log({ timestamp : HxOverrides.dateStr(new Date()), level : "Performance", message : message, data : data, ref : this._ref, instanceId : this._instanceId});
	}
	,beginMeasure: function(name) {
		if(this._measurements == null) {
			this._measurements = new haxe_ds_StringMap();
		}
		var this1 = this._measurements;
		var value = new Date().getTime();
		this1.h[name] = value;
	}
	,endMeasure: function(name) {
		if(this._measurements == null) {
			this._measurements = new haxe_ds_StringMap();
		}
		if(Object.prototype.hasOwnProperty.call(this._measurements.h,name)) {
			var start = this._measurements.h[name];
			var time = Math.round(new Date().getTime() - start);
			logging_LogManager.get_instance().log({ timestamp : HxOverrides.dateStr(new Date()), level : "Performance", message : name + " " + time + "ms", data : null, ref : this._ref, instanceId : this._instanceId});
			var _this = this._measurements;
			if(Object.prototype.hasOwnProperty.call(_this.h,name)) {
				delete(_this.h[name]);
			}
		}
	}
	,log: function(level,message,data) {
		logging_LogManager.get_instance().log({ timestamp : HxOverrides.dateStr(new Date()), level : level, message : message, data : data, ref : this._ref, instanceId : this._instanceId});
	}
	,createUniqueInstanceId: function(prefix) {
		if(logging_Logger._uniqueIds == null) {
			logging_Logger._uniqueIds = new haxe_ds_StringMap();
		}
		var key = this._ref;
		if(prefix != null) {
			key += "_" + prefix;
		}
		var n = 0;
		if(Object.prototype.hasOwnProperty.call(logging_Logger._uniqueIds.h,key)) {
			n = logging_Logger._uniqueIds.h[key];
			++n;
		}
		logging_Logger._uniqueIds.h[key] = n;
		if(prefix != null) {
			this._instanceId = prefix + n;
		} else {
			this._instanceId = "instance" + n;
		}
	}
	,generateUuid: function() {
		var uuid = "";
		var _g = 0;
		while(_g < 8) {
			var i = _g++;
			var n = new Date().getTime() + Std.random(16777215) * Std.random(16777215);
			var hash = haxe_crypto_Sha1.encode(n == null ? "null" : "" + n);
			var c1 = hash.charAt(Std.random(hash.length));
			var c2 = hash.charAt(Std.random(hash.length));
			var c3 = hash.charAt(Std.random(hash.length));
			var c4 = hash.charAt(Std.random(hash.length));
			uuid += c1 + c2 + c3 + c4;
			if(i == 1 || i == 2 || i == 3 || i == 4) {
				uuid += "-";
			}
		}
		return uuid;
	}
	,__class__: logging_Logger
};
var logging_adaptors_NullLogAdaptor = function() {
	this._config = { };
};
logging_adaptors_NullLogAdaptor.__name__ = "logging.adaptors.NullLogAdaptor";
logging_adaptors_NullLogAdaptor.__interfaces__ = [logging_ILogAdaptor];
logging_adaptors_NullLogAdaptor.prototype = {
	get_config: function() {
		return this._config;
	}
	,processLogData: function(data) {
	}
	,__class__: logging_adaptors_NullLogAdaptor
};
var logging_formatters_DefaultFormatter = function() {
};
logging_formatters_DefaultFormatter.__name__ = "logging.formatters.DefaultFormatter";
logging_formatters_DefaultFormatter.__interfaces__ = [logging_ILogLineFormatter];
logging_formatters_DefaultFormatter.prototype = {
	format: function(data,buffer) {
		buffer.b += Std.string(data.timestamp);
		buffer.b += " > ";
		var x = StringTools.rpad((js_Boot.__cast(data.level , String)).toUpperCase()," ",11);
		buffer.b += Std.string(x);
		buffer.b += " > ";
		if(data.ref != null) {
			buffer.b += Std.string(data.ref);
			buffer.b += " > ";
		}
		if(data.instanceId != null) {
			buffer.b += Std.string(data.instanceId);
			buffer.b += " > ";
		}
		if(data.message != null) {
			buffer.b += Std.string(data.message);
		}
	}
	,formatObject: function(obj) {
		if(obj == null) {
			return "";
		}
		var _g = Type.typeof(obj);
		if(_g._hx_index == 6) {
			if(_g.c == haxe_ds_StringMap) {
				var o = { };
				var sm = js_Boot.__cast(obj , haxe_ds_StringMap);
				var h = sm.h;
				var _g_h = h;
				var _g_keys = Object.keys(h);
				var _g_length = _g_keys.length;
				var _g_current = 0;
				while(_g_current < _g_length) {
					var key = _g_keys[_g_current++];
					o[key] = sm.h[key];
				}
				return JSON.stringify(o);
			}
		}
		if(obj == null) {
			return "null";
		} else {
			return Std.string(obj);
		}
	}
	,__class__: logging_formatters_DefaultFormatter
};
var queues_IQueue = function() { };
queues_IQueue.__name__ = "queues.IQueue";
queues_IQueue.__isInterface__ = true;
queues_IQueue.prototype = {
	__class__: queues_IQueue
};
var queues_NonQueue = function() {
	this._name = null;
	this.items = [];
};
queues_NonQueue.__name__ = "queues.NonQueue";
queues_NonQueue.__interfaces__ = [queues_IQueue];
queues_NonQueue.prototype = {
	get_name: function() {
		return this._name;
	}
	,set_name: function(value) {
		this._name = value;
		return value;
	}
	,get_onMessage: function() {
		return this._onMessage;
	}
	,set_onMessage: function(value) {
		this._onMessage = value;
		this.processQueue();
		return value;
	}
	,get_onMessageWithProperties: function() {
		return this._onMessageWithProperties;
	}
	,set_onMessageWithProperties: function(value) {
		this._onMessageWithProperties = value;
		this.processQueue();
		return value;
	}
	,config: function(config) {
	}
	,start: function() {
		return thenshim_Promise._new(function(resolve,reject) {
			resolve(true);
		});
	}
	,stop: function() {
		return thenshim_Promise._new(function(resolve,reject) {
			resolve(true);
		});
	}
	,enqueue: function(item,properties) {
		this.items.push(item);
		this.processQueue();
	}
	,requeue: function(item,delay) {
		var _gthis = this;
		if(delay == null || delay == 0) {
			this.enqueue(item);
		} else {
			haxe_Timer.delay(function() {
				_gthis.enqueue(item);
			},delay);
		}
	}
	,processQueue: function() {
		var _gthis = this;
		if(this._onMessage == null || this.items.length == 0) {
			return;
		}
		var item = this.items.shift();
		thenshim_Promise.then(this._onMessage(item),function(success) {
			_gthis.processQueue();
		},function(error) {
			_gthis.processQueue();
		});
	}
	,__class__: queues_NonQueue
};
var queues_QueueFactory = function() {
	this.init();
};
queues_QueueFactory.__name__ = "queues.QueueFactory";
queues_QueueFactory.get_instance = function() {
	if(queues_QueueFactory._instance == null) {
		queues_QueueFactory._instance = new queues_QueueFactory();
	}
	return queues_QueueFactory._instance;
};
queues_QueueFactory.prototype = {
	init: function() {
	}
	,createQueue: function(typeId,config) {
		var queue = null;
		if(typeId == "simple-queue") {
			queue = new queues_SimpleQueue();
			if(config != null) {
				queue.config(config);
			}
		}
		if(typeId == "non-queue") {
			queue = new queues_NonQueue();
			if(config != null) {
				queue.config(config);
			}
		}
		return queue;
	}
	,__class__: queues_QueueFactory
};
var queues_SimpleQueue = function() {
	this._processingItem = false;
	this._name = null;
	this.items = [];
};
queues_SimpleQueue.__name__ = "queues.SimpleQueue";
queues_SimpleQueue.__interfaces__ = [queues_IQueue];
queues_SimpleQueue.prototype = {
	get_name: function() {
		return this._name;
	}
	,set_name: function(value) {
		this._name = value;
		return value;
	}
	,get_onMessage: function() {
		return this._onMessage;
	}
	,set_onMessage: function(value) {
		this._onMessage = value;
		this.processQueue();
		return value;
	}
	,get_onMessageWithProperties: function() {
		return this._onMessageWithProperties;
	}
	,set_onMessageWithProperties: function(value) {
		this._onMessageWithProperties = value;
		this.processQueue();
		return value;
	}
	,config: function(config) {
	}
	,start: function() {
		return thenshim_Promise._new(function(resolve,reject) {
			resolve(true);
		});
	}
	,stop: function() {
		return thenshim_Promise._new(function(resolve,reject) {
			resolve(true);
		});
	}
	,enqueue: function(item,properties) {
		this.items.push(item);
		if(this.items.length == 1) {
			this.processQueue();
		}
	}
	,requeue: function(item,delay) {
		var _gthis = this;
		if(delay == null || delay == 0) {
			this.enqueue(item);
		} else {
			haxe_Timer.delay(function() {
				_gthis.enqueue(item);
			},delay);
		}
	}
	,processQueue: function() {
		var _gthis = this;
		if(this._onMessage == null || this.items.length == 0) {
			return;
		}
		if(this._processingItem) {
			return;
		}
		this._processingItem = true;
		var item = this.items.shift();
		thenshim_Promise.then(this._onMessage(item),function(success) {
			_gthis._processingItem = false;
			_gthis.processQueue();
		},function(error) {
			_gthis._processingItem = false;
			_gthis.processQueue();
		});
	}
	,__class__: queues_SimpleQueue
};
var sys_FileSystem = function() { };
sys_FileSystem.__name__ = "sys.FileSystem";
sys_FileSystem.exists = function(path) {
	try {
		js_node_Fs.accessSync(path);
		return true;
	} catch( _g ) {
		return false;
	}
};
var sys_io_FileInput = function(fd) {
	this.hasReachedEof = false;
	this.fd = fd;
	this.pos = 0;
};
sys_io_FileInput.__name__ = "sys.io.FileInput";
sys_io_FileInput.__super__ = haxe_io_Input;
sys_io_FileInput.prototype = $extend(haxe_io_Input.prototype,{
	throwEof: function() {
		this.hasReachedEof = true;
		throw haxe_Exception.thrown(new haxe_io_Eof());
	}
	,readByte: function() {
		var buf = js_node_buffer_Buffer.alloc(1);
		var bytesRead;
		try {
			bytesRead = js_node_Fs.readSync(this.fd,buf,0,1,this.pos);
		} catch( _g ) {
			var e = haxe_Exception.caught(_g).unwrap();
			if(e.code == "EOF") {
				this.hasReachedEof = true;
				throw haxe_Exception.thrown(new haxe_io_Eof());
			}
			throw haxe_Exception.thrown(haxe_io_Error.Custom(e));
		}
		if(bytesRead == 0) {
			this.hasReachedEof = true;
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
		this.pos++;
		return buf[0];
	}
	,readBytes: function(s,pos,len) {
		var data = s.b;
		var buf = js_node_buffer_Buffer.from(data.buffer,data.byteOffset,s.length);
		var bytesRead;
		try {
			bytesRead = js_node_Fs.readSync(this.fd,buf,pos,len,this.pos);
		} catch( _g ) {
			var e = haxe_Exception.caught(_g).unwrap();
			if(e.code == "EOF") {
				this.hasReachedEof = true;
				throw haxe_Exception.thrown(new haxe_io_Eof());
			}
			throw haxe_Exception.thrown(haxe_io_Error.Custom(e));
		}
		if(bytesRead == 0) {
			this.hasReachedEof = true;
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
		this.pos += bytesRead;
		return bytesRead;
	}
	,close: function() {
		js_node_Fs.closeSync(this.fd);
	}
	,seek: function(p,pos) {
		this.hasReachedEof = false;
		switch(pos._hx_index) {
		case 0:
			this.pos = p;
			break;
		case 1:
			this.pos += p;
			break;
		case 2:
			this.pos = js_node_Fs.fstatSync(this.fd).size + p;
			break;
		}
	}
	,tell: function() {
		return this.pos;
	}
	,eof: function() {
		return this.hasReachedEof;
	}
	,__class__: sys_io_FileInput
});
var sys_io_FileOutput = function(fd) {
	this.fd = fd;
	this.pos = 0;
};
sys_io_FileOutput.__name__ = "sys.io.FileOutput";
sys_io_FileOutput.__super__ = haxe_io_Output;
sys_io_FileOutput.prototype = $extend(haxe_io_Output.prototype,{
	writeByte: function(b) {
		var buf = js_node_buffer_Buffer.alloc(1);
		buf[0] = b;
		js_node_Fs.writeSync(this.fd,buf,0,1,this.pos);
		this.pos++;
	}
	,writeBytes: function(s,pos,len) {
		var data = s.b;
		var buf = js_node_buffer_Buffer.from(data.buffer,data.byteOffset,s.length);
		var wrote = js_node_Fs.writeSync(this.fd,buf,pos,len,this.pos);
		this.pos += wrote;
		return wrote;
	}
	,close: function() {
		js_node_Fs.closeSync(this.fd);
	}
	,seek: function(p,pos) {
		switch(pos._hx_index) {
		case 0:
			this.pos = p;
			break;
		case 1:
			this.pos += p;
			break;
		case 2:
			this.pos = js_node_Fs.fstatSync(this.fd).size + p;
			break;
		}
	}
	,tell: function() {
		return this.pos;
	}
	,__class__: sys_io_FileOutput
});
var sys_io_FileSeek = $hxEnums["sys.io.FileSeek"] = { __ename__:true,__constructs__:null
	,SeekBegin: {_hx_name:"SeekBegin",_hx_index:0,__enum__:"sys.io.FileSeek",toString:$estr}
	,SeekCur: {_hx_name:"SeekCur",_hx_index:1,__enum__:"sys.io.FileSeek",toString:$estr}
	,SeekEnd: {_hx_name:"SeekEnd",_hx_index:2,__enum__:"sys.io.FileSeek",toString:$estr}
};
sys_io_FileSeek.__constructs__ = [sys_io_FileSeek.SeekBegin,sys_io_FileSeek.SeekCur,sys_io_FileSeek.SeekEnd];
var thenshim_PromiseFactory = function() { };
thenshim_PromiseFactory.__name__ = "thenshim.PromiseFactory";
thenshim_PromiseFactory.__isInterface__ = true;
thenshim_PromiseFactory.prototype = {
	__class__: thenshim_PromiseFactory
};
var thenshim_js_JSPromiseFactory = function() {
};
thenshim_js_JSPromiseFactory.__name__ = "thenshim.js.JSPromiseFactory";
thenshim_js_JSPromiseFactory.__interfaces__ = [thenshim_PromiseFactory];
thenshim_js_JSPromiseFactory.prototype = {
	make: function(executor) {
		return new Promise(executor);
	}
	,asResolved: function(object) {
		return Promise.resolve(object);
	}
	,asRejected: function(reason) {
		return Promise.reject(reason);
	}
	,__class__: thenshim_js_JSPromiseFactory
};
var thenshim_Promise = {};
thenshim_Promise._new = function(executor) {
	if(thenshim_Promise.factory == null) {
		thenshim_Promise.factory = new thenshim_js_JSPromiseFactory();
	}
	return thenshim_Promise.factory.make(executor);
};
thenshim_Promise.resolve = function(object) {
	return thenshim_Promise.factory.asResolved(object);
};
thenshim_Promise.reject = function(reason) {
	return thenshim_Promise.factory.asRejected(reason);
};
thenshim_Promise.then = function(this1,onFulfilled,onRejected) {
	return this1.then(onFulfilled,onRejected);
};
var thenshim_Thenable = function() { };
thenshim_Thenable.__name__ = "thenshim.Thenable";
thenshim_Thenable.__isInterface__ = true;
thenshim_Thenable.prototype = {
	__class__: thenshim_Thenable
};
var thenshim_ThenableCallback = {};
thenshim_ThenableCallback.toJSPromiseHandler = function(this1) {
	return this1;
};
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
Object.defineProperty(String.prototype,"__class__",{ value : String, enumerable : false, writable : true});
String.__name__ = "String";
Array.__name__ = "Array";
Date.prototype.__class__ = Date;
Date.__name__ = "Date";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
js_Boot.__toStr = ({ }).toString;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl;
}
queues_QueueFactory.SIMPLE_QUEUE = "simple-queue";
queues_QueueFactory.NON_QUEUE = "non-queue";
thenshim_Promise.factory = new thenshim_js_JSPromiseFactory();
Main.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
